#!/bin/bash

_version_script="1.0.0"

# This Functions Are Used for Emina-Cli
# Do Not Edit if you don't know what you're doing. It may not work
# All Functions
function echo_centered (){
    [[ $# == 0 ]] && return 1
    declare -i TERM_COLS="$(tput cols)"
    declare -i str_len="${#1}"
    [[ $str_len -ge $TERM_COLS ]] && {
        echo -e "$1";
        return 0;
    }
    declare -i filler_len="$(( (TERM_COLS - str_len) / 2 ))"
    [[ $# -ge 2 ]] && ch="${2:0:1}" || ch=" "
    filler=""
    for (( i = 0; i < filler_len; i++ )); do
        filler="${filler}${ch}"
    done
    printf "%s%s%s" "$filler" "$1" "$filler"
    [[ $(( (TERM_COLS - str_len) % 2 )) -ne 0 ]] && printf "%s" "${ch}"
    return 0
}

function Text_Center(){
	sed  -e :a -e "s/^.\{1,$(($(tput cols)-1))\}$/ & /;ta" <<< "${1}" | tr -d '\n' | head -c "$(tput cols)"
}

function CenteredGrid(){
	sed  -e :a -e "s/^.\{1,$(($(tput cols)-1))\}$/ & /;ta" /dev/fd/0 | tr '\n' '\r'
}

BASE_URL="https://gogoplay1.com"

function Banner(){
cat <<"EOF"
 _____           _                    ____ _ _ 
| ____|_ __ ___ (_)_ __   __ _       / ___| (_)
|  _| | '_ ` _ \| | '_ \ / _` |_____| |   | | |
| |___| | | | | | | | | | (_| |_____| |___| | |
|_____|_| |_| |_|_|_| |_|\__,_|      \____|_|_|
EOF
}

function code_ed() {
	local str=${1:-$(awk '{printf $0}')}
	local fmt="%x"
	local chr
	local -i i
	for (( i=0; i<=((${#str}-1)); i++ )); do
		chr=${str:i:1}
		printf  "${fmt}" "'${chr}"
	done
}

function dgs(){
	printf "${*}"
}

function TimeTranslate(){
  local T=$1
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  [[ $D > 0 ]] && printf '%d D ' $D
  [[ $H > 0 ]] && printf '%d Hrs ' $H
  [[ $M > 0 ]] && printf '%d Mins ' $M
  [[ $D > 0 || $H > 0 || $M > 0 ]] && printf 'and '
  printf '%d Secs\n' $S
}

function show_help(){
	echo -e 'Usage: emina-termux -s "<search query>" -e "[Episode]" -q "High" [--dub]'
	echo -e 'Usage: emina-termux [arguments...]'
	echo -e ''
	echo -e "Program that allows you to download and watch anime via command line."
	echo -e ''
	echo -e "Options:"
	echo -e "   -d\t\t\t\t: Uninstall Script with Config Files"
	echo -e "   -v\t\t\t\t: Show the version of the script"
	echo -e '   -s "<search query>"\t\t: Search Anime'
	echo -e '   -e "[episode]"\t\t: Number of Episode'
	echo -e '   -q "[quality]"\t\t: Quality of Video'
	echo -e '   -p "[number]"\t\t: Specify Picks in Anime Selection'
	echo -e '   -t "[server]"\t\t: Specify Server (default, 1, 2, 3)'
	echo -e "   -d\t\t\t\t: Switch to Download Mode"
	echo -e '   --dub\t\t\t: Switch to Dub'
	echo -e "   -h\t\t\t\t: Show this help"
	echo -e ''
	echo -e "Misc:"
	echo -e '   -H\t\t\t\t: Print History File'
	echo -e '   -D\t\t\t\t: Clear History File'
	echo -e '   -b\t\t\t\t: Play Anime from History'
	echo -e ''
}

infoarray[0]="It's so easy to use!"
infoarray[1]="You can change Servers at /etc/emina/emina.conf"
infoarray[2]="Don't be Evil"
infoarray[3]='Want Dub mode? Just add the "--dub" argument'
infoarray[4]="Date now is: $(date)"
infoarray[5]="LMAO"
infoarray[6]="Report Bugs and Unknown Errors on Repo"
infoarray[7]="There was only 2 servers on Watch Mode (default, 1)"
infoarray[8]='Specification Arg Flags may help you to automate, more info in "-h"'
infoarray[9]="Checkings are now improved than previous updates"

infowait[0]="Please Wait... Just Sitback and Relax"
infowait[1]="Please Wait... Hold your Balls"
infowait[2]="Please Wait... On my way"
infowait[3]="Please Wait... Here it comes"

function _menu_message(){
	clear
	tput setaf "$(( RANDOM % 231 ))" && echo "$(Banner | CenteredGrid)" && tput sgr0
	echo_centered "Version: v1.0.0"
	Text_Center "${infoarray[$(( RANDOM % ${#infoarray[@]} ))]}"
	echo
}

function hideCursor(){
  printf "\033[?25l"
  trap "showCursor && exit 0" 2
}

function showCursor(){
  printf "\033[?25h"
}

function choose_from_menu() {
    local prompt="$1" outvar="$2"
    shift 2
    local options=("$@") cur=0 count=${#options[@]} index=0
    local esc=$(echo -en "\e")
    hideCursor
    printf "$prompt\n"
    while true; do
        index=0 
        for o in "${options[@]}"; do
            if [ "$index" == "$cur" ]; then 
				echo -e "  \033[0;32mᐅ\033[0m  \e[7m${o}\e[0m"
            else
				echo "     ${o}"
            fi
            index=$(( $index + 1 ))
        done
        read -s -n3 key
        if [[ $key == $esc[A ]]; then
			cur=$(( $cur - 1 ))
            [ "$cur" -lt 0 ] && cur=0
        elif [[ $key == $esc[B ]]; then
			cur=$(( $cur + 1 ))
            [ "$cur" -ge $count ] && cur=$(( $count - 1 ))
        elif [[ $key == "" ]]; then 
        	menu_result_menu="${cur}"
        	showCursor
			break
        fi
        echo -en "\e[${count}A"
    done
    printf -v $outvar "${options[$cur]}"
}

function UnitConversion(){
	B=$1
	KB=$(bc -l <<< "scale=2; $B/1024")
	MB=$(bc -l <<< "scale=2; $B/1024/1024")
	GB=$(bc -l <<< "scale=2; $B/1024/1024/1024")
	TB=$(bc -l <<< "scale=2; $GB/1024")
	[[ $(echo "$TB" | awk -F[.] '{print $1}') > 0 ]] && echo "$TB TB" && return
	[[ $(echo "$GB" | awk -F[.] '{print $1}') > 0 ]] && echo "$GB GB" && return
	[[ $(echo "$MB" | awk -F[.] '{print $1}') > 0 ]] && echo "$MB MB" && return
	[[ $(echo "$KB" | awk -F[.] '{print $1}') > 0 ]] && echo "$KB KB" && return
	[[ $(echo "$B" | awk -F[.] '{print $1}') > 0 ]] && echo "$B B"
}

ErrorCatchFunc(){
	tput setaf 1208; printf "[ERROR CATCHER] "; tput sgr0; printf "$1"; printf "\n"
}

RedCol() {
    printf '\033[1;31;31m%b\033[0m' "$1"
}

AdditionalInfoFunc(){
	tput setaf 150; printf "[ADDITIONAL INFO] "; tput sgr0; printf "$1"; printf "\n"
}

NumberingFunc(){
	tput setaf 219; printf "[$1]${inv_sp}"; printf "$2"
}

NumberingFunc1(){
	tput setaf 219; printf "[$1]${inv_sp}"; printf "$2"; tput sgr0
}

InputSign(){
	tput setaf 111; printf "[+] "; tput sgr0; printf "$1"; printf "\n"
}

InputSignNoBreak(){
	tput setaf 111; printf "[+] "; tput sgr0; printf "$1"
}

GreenCol() {
    printf '\033[1;31;32m%b\033[0m' "$1"
}

YellowCol() {
    printf '\033[1;31;33m%b\033[0m' "$1"
}

design_input(){
	tput setaf 111; printf "[+] "; tput sgr0; printf "$1"; printf "\n"
}

info_func() {
    GreenCol "[INFO] "
    printf -- "%s" "$1"
    printf "\n"
}

inf_func_down() {
    GreenCol "[INFO] "
    printf -- "%s" "$1"
}

warn_func() {
    YellowCol "[WARN] "
    printf -- "%s" "$1"
    printf "\n"
}

err_func() {
    RedCol "ERROR [#$1] "
    printf -- "%s" "$2"
    printf "\n"
}
	
# Traps When the download Interrupted
trapDel(){
	trap ctrl_c INT
}

# Delete if Interrupted, Continuing downloads might be implemented soon
ctrl_c(){
	rm $FILEVIDNAME
	rm $FILEVIDNAME.aria2
	echo ""
	WarningFunc "Downloads Interrupted, File not downloaded"
	exit 1
}

trapDel1(){
	trap ctrl_c1 INT
}

# Delete if Interrupted, Continuing downloads might be implemented soon
ctrl_c1(){
	rm $FILEVIDNAME
	rm $FILEVIDNAME.st
	WarningFunc "Downloads Interrupted, File not downloaded!!"
	exit 1
}

function printTable(){
    local -r delimiter="${1}"
    local -r data="$(removeEmptyLines "${2}")"
    if [[ "${delimiter}" != '' && "$(isEmptyString "${data}")" = 'false' ]]
    then
        local -r numberOfLines="$(wc -l <<< "${data}")"
        if [[ "${numberOfLines}" -gt '0' ]]
        then
            local table=''
            local i=1
            for ((i = 1; i <= "${numberOfLines}"; i = i + 1))
            do
                local line=''
                line="$(sed "${i}q;d" <<< "${data}")"
                local numberOfColumns='0'
                numberOfColumns="$(awk -F "${delimiter}" '{print NF}' <<< "${line}")"
                # Add Line Delimiter
                if [[ "${i}" -eq '1' ]]
                then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi
                # Add Header Or Body
                table="${table}\n"
                local j=1
                for ((j = 1; j <= "${numberOfColumns}"; j = j + 1))
                do
                    table="${table}$(printf '#| %s' "$(cut -d "${delimiter}" -f "${j}" <<< "${line}")")"
                done
                table="${table}#|\n"
                # Add Line Delimiter
                if [[ "${i}" -eq '1' ]] || [[ "${numberOfLines}" -gt '1' && "${i}" -eq "${numberOfLines}" ]]
                then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi
            done
            if [[ "$(isEmptyString "${table}")" = 'false' ]]
            then
                echo -e "${table}" | column -s '#' -t | sed '/+[[:space:]]/ s/ /-/g'
            fi
        fi
    fi
}

function removeEmptyLines(){
    local -r content="${1}"
    echo -e "${content}" | sed '/^\s*$/d'
}

function repeatString(){
    local -r string="${1}"
    local -r numberToRepeat="${2}"
    if [[ "${string}" != '' && "${numberToRepeat}" =~ ^[1-9][0-9]*$ ]]
    then
        local -r result="$(printf "%${numberToRepeat}s")"
        echo -e "${result// /${string}}"
    fi
}

function isEmptyString(){
    local -r string="${1}"
    if [[ "$(trimString "${string}")" = '' ]]
    then
        echo 'true' && return 0
    fi
    echo 'false' && return 1
}

function trimString(){
    local -r string="${1}"
    sed 's,^[[:blank:]]*,,' <<< "${string}" | sed 's,[[:blank:]]*$,,'
}

function ProgressBarModifiedDown(){
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*3)/10
    let _left=30-$_done
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")
printf "\r$(tput setaf 111; printf "[+] "; tput sgr0)Downloading : [${_fill// /▇}${_empty// / }] ${_progress}%%" && printf "      $3"
}
