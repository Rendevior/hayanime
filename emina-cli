#!/bin/bash
#
# Emina-Cli is a Free OpenSource Anime Downloader for Linux
# 
#                    Version: v0.6 Beta
#                        Statistics:
#                     Total Words: 4930
#                  Total Character: 37277
#                     Total Lines: 1404
# 
#   Please do not sell this Script, Its Free..
#   Author: TheGlock
#   Create Issues if theres bug Appears, or Request Something.
#
#  Authors Note: I'm Not Responsible if anything Happens in Your Machine, (Try at Your Own Risk)
#  But bro trust me, Its a Good tool hidden in Github Algorithm
#  Give a Star if you like this small Project
#  Only Available In Ubuntu, Debian. if possible i will make it compatible in Other OS too 
#  It's Kinda hard to test in other OS, i dont have other than Ubuntu Debian
#

# Variables and Regexes
REGNUMBERONLY="^([M|m]ovie|[0-9][0-9]*)+$"
NOPUNCTUATIONS='['!'@#\$%^\&*()_+€£¥₩÷×~`¡¿<>%+{}]'
RANGEREGNUMBONLY="^([M|m]ovie|[0-9]*-[0-9]*|[0-9]*|[0-9]*.[0-9])$"
HHSS="^[0-9]$|[D|d]efault"
PermsInst="sudo"

# Automated Install Packages and Checks
function InstallPrerequisites(){
	if [ -f /etc/emina/down.conf ]; then
		source /etc/emina/down.conf
	else
		${PermsInst} mkdir -p /etc/emina
		${PermsInst} wget -q -O /etc/emina/down.conf "https://raw.githubusercontent.com/TheGlockMisc/emina-cli/main/files/down.conf"
		source /etc/emina/down.conf
	fi
	if [ -f /etc/emina/eminavars ]; then
		source /etc/emina/eminavars
else
		${PermsInst} wget -q -O /etc/emina/eminavars "https://raw.githubusercontent.com/TheGlockMisc/emina-cli/main/files/eminavars"
		source /etc/emina/eminavars
	fi
	BASE_URL="$(••••)"
	if ! [ -f /usr/local/sbin/$(basename $0) ]; then
		FileDir="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )/$(basename $0)"
		${PermsInst} cp $FileDir /usr/local/sbin/$(basename $0)
		${PermsInst} chmod 0777 /usr/local/sbin/$(basename $0)
		${PermsInst} rm $FileDir
		InfoFunc "The File was Moved!! You Can Execute it in any Directory"
		InfoFunc "Run: $(basename $0)"
		exit 1
	fi
# If the machine was not Updated/Upgraded in a Month
	if [[ -f "/var/lib/apt/periodic/update-success-stamp" ]]; then
		LAST_UPDATED=$(stat --format="%X" /var/lib/apt/periodic/update-success-stamp)
		UNIX_TIME=$(date +%s)
		TIME_DIFF=$(( UNIX_TIME - LAST_UPDATED ))
		if [[ "${TIME_DIFF}" -gt 2629746 ]]; then
				${PermsInst} apt-get update -y
				${PermsInst} apt-get upgrade -y
		fi
	else
		${PermsInst} apt-get update -y
		${PermsInst} apt-get upgrade -y
	fi
	for packages in figlet recode axel ruby; do
		if ! [ -x "$(command -v $packages)" ]; then
			yes | ${PermsInst} apt install $packages
			clear
		fi
	done
# Install Go Lang if its not Installed (Its Required for PUP)
	if ! [ -x "$(command -v go)" ]; then
		yes | ${PermsInst} apt install golang
	fi
# Install Lolcat for Fancy Colored Text
    if ! [ -x "$(command -v lolcat)" ]; then
        ${PermsInst} gem install lolcat
    fi
# For Colored Text
    if ! [ -x "$(command -v tput)" ]; then
        yes | ${PermsInst} apt-get install libncurses5-dbg
    fi
# Install the most Compatible Downloading Utility in Bash
    if ! [ -x "$(command -v aria2c)" ]; then
    	yes | ${PermsInst} apt-get install aria2
    fi
# Thanks to Ericchiang, it makes my Job Easy and its Really Helpful
    if ! [ -x "$(command -v pup)" ]; then
		${PermsInst} go get github.com/ericchiang/pup
		export GOROOT=/usr/bin/go
		${PermsInst} mv /root/go/bin/pup /usr/bin/pup
		${PermsInst} chmod +x /usr/bin/pup
	elif [ -z "$(pup --version)" ]; then
		${PermsInst} go get github.com/ericchiang/pup
		export GOROOT=/usr/bin/go
		${PermsInst} mv /root/go/bin/pup /usr/bin/pup
		${PermsInst} chmod +x /usr/bin/pup
	fi
# Revised Checks if theres error escapes from the conditions
	for check in figlet tput lolcat aria2c recode axel pup ruby; do
		if [[ -z "$(which $check)" ]]; then
			ErrorFunc1b "Package $check is not installed."
			InfoFunc "Rerun this Script again"
			exit 1
		fi
	done
}

# Collect All Needed Data to Download
function OverAllInputs(){
	MainMenuMessage
	if [[ $AnimeSearch = "" ]]; then
		read -rp "$(InputSign 'Search Anime: ')" AnimeSearch
	fi
	if [[ $AnimeSearch = "" ]]; then
		ErrorFunc1a "You typed Nothing, CTRL + C to Exit"
		sleep 2
		unset AnimeSearch
		OverAllInputs
    elif [[ $AnimeSearch =~ $NOPUNCTUATIONS ]]; then
		ErrorFunc2a "Anime Name Mustn't have Punctuations Marks"
		sleep 2
		unset AnimeSearch
		OverAllInputs
	fi
	SearchForAnime
	if [[ $SeriesSelected == "" ]]; then
		SeriesSelector
		read -rp "$(InputSign 'Pick a Number: ')" SeriesSelected
	fi
	if [[ $SeriesSelected =~ $NOPUNCTUATIONS ]]; then
		ErrorFunc2a "Anime Name Mustn't have Punctuations Marks"
		sleep 2
		unset SeriesSelected
		OverAllInputs
	elif [[ $SeriesSelected = "" ]]; then
		ErrorFunc1a "You Entered Nothing"
		sleep 2
		OverAllInputs
	elif [[ ! $SeriesSelected =~ $REGNUMBERONLY ]]; then
        ErrorFunc3a 'Number Only Allowed'
        sleep 2
        unset SeriesSelected
        OverAllInputs
    fi
    SeriesSelectorPrt2
    SpecialEpisodeChecker
    if [[ $EpisodeSelected = "" ]]; then
	read -rp "$(InputSign "Episode [$LeastEpiList-$LastEpiList]: ")" EpisodeSelected
	fi
	if [[ ! $EpisodeSelected =~ $RANGEREGNUMBONLY ]]; then
		ErrorFunc3a 'Number Only Allowed'
		sleep 2
		unset EpisodeSelected
		OverAllInputs
	elif ! [[ $EpisodeSelected =~ .*[.].* ]]; then
		if [[ $EpisodeSelected -gt $LastEpiList ]]; then
			ErrorFunc4a "Out of range ($LeastEpiList-$LastEpiList) Episode only"
			sleep 2
			unset EpisodeSelected
			OverAllInputs
		fi
	fi
	if [[ $EpisodeSelected = "" ]]; then
		ErrorFunc1a "You Entered Nothing"
		sleep 2
		unset EpisodeSelected
		OverAllInputs
	fi
	if [[ $QualityPicker = "" ]]; then
		read -p "$(InputSign 'Quality: ')" QualityPicker
	fi
	InfoFunc "Please Wait... I'm doing my Job"
}

# Reduced WGET Requests to Optimize Loadings
# With Quotes to Validate all the Lines not Truncated in One line
function SearchPageLoad(){
	SearchPages="$(
		{
			wget -qO- "$BASE_URL/search.html?keyword=$AnimeSearch"
			wget -qO- "$BASE_URL/search.html?keyword=$AnimeSearch&page=2"
		}
	)"
}

function SearchForAnime(){
	SearchPageLoad
# Convert Spaces into Plus Sign
    AnimeSearch=$(
		echo "$AnimeSearch" | \
		tr " " +
	)
# Scrapes to Check is Available First
	QueryDetect=$(
		echo -e "$SearchPages" | \
		pup 'div.name' | \
		sed '/^<div.*/d' | \
		sed '/^<\/.*>/d' | \
		sed 's/^ //g' | \
		sed 's| Episode.*[0-9]*||g' | \
		uniq | \
		cat -n | \
		sed 's/\t/) /g' | \
		sed 's/^ *//g'
	)
    if [[ $QueryDetect = "" ]]; then
		ErrorFunc1c "Seems Like No Anime Exist Based on Your Search, Try Again"
		sleep 2
		unset AnimeSearch EpisodeSelected QualityPicker
		OverAllInputs
	fi
}


function SeriesSelector(){
# Dub Mode Conditions
# Displays the Possible Anime in Existing Based on Search
	if [[ $DUBMODE == "1" ]]; then
		echo -e "$SearchPages" | \
		pup 'div.name' | \
		sed '/^<div.*/d' | \
		sed '/^<\/.*>/d' | \
		sed 's/^ //g' | \
		sed 's| Episode.*[0-9]*||g' | \
		awk '/[d|D]ub/' | \
		uniq | \
		while read -r wiffles; do
			if [[ $(echo $wiffles | wc -m) -gt 49 ]]; then
				echo ${wiffles:0:49}..${wiffles:($(echo $wiffles | wc -m)-10):$(echo $wiffles | wc -m)}
			else 
				echo ${wiffles}
			fi
		done | \
		cat -n | \
		sed 's/\t/+ /g' | \
		sed 's/^ *//g' | \
		printTable '+' "Num+Anime Name\n$(awk '{print $0}')"
	else
		echo -e "$SearchPages" | \
		pup 'div.name' | \
		sed '/^<div.*/d' | \
		sed '/^<\/.*>/d' | \
		sed 's/^ //g' | \
		sed 's| Episode.*[0-9]*||g' | \
		sed '/[d|D]ub/d' | \
		uniq | \
		while read -r wiffles; do
			if [[ $(echo $wiffles | wc -m) -gt 49 ]]; then
				echo ${wiffles:0:49}..${wiffles:($(echo $wiffles | wc -m)-10):$(echo $wiffles | wc -m)}
			else 
				echo ${wiffles}
			fi
		done | \
		cat -n | \
		sed 's/\t/+ /g' | \
		sed 's/^ *//g' | \
		printTable '+' "Num+Anime Name\n$(awk '{print $0}')"
	fi
}


function SeriesSelectorPrt2(){
# An Seperate Function For Getting Server
    if [[ $DUBMODE == "1" ]]; then
		SeriesLinkPicked=$(
			echo -e "$SearchPages" | \
			pup 'li.video-block' | \
			grep -o "/videos/[^'\"<>]*" | \
			awk '/[d|D]ub/' | \
			sed -n "$SeriesSelected"p | \
			sed "s|/videos|$BASE_URL/videos|g" | \
			sed 's|-episode-[0-9].*||g'
		)
	else
		SeriesLinkPicked=$(
			echo -e "$SearchPages" | \
			pup 'li.video-block' | \
			grep -o "/videos/[^'\"<>]*" | \
			sed '/[d|D]ub/d' | \
			sed -n "$SeriesSelected"p | \
			sed "s|/videos|$BASE_URL/videos|g" | \
			sed 's|-episode-[0-9].*||g'
		)
	fi
	SerNameFile=$(
		echo "$SeriesLinkPicked" | \
		awk -F[/] '{print $5}'    
	)
}


function SpecialEpisodeChecker(){
# Basically an Special Episode Checker ie. 6.5, 7.5
	if [[ $DUBMODE == "1" ]]; then
		SpecialEpiCheck1=$(
			echo "$BASE_URL/videos/$SerNameFile-episode-1" | \
			uniq
		)
		SpecialEpiCheck2=$(
			wget -qO- $SpecialEpiCheck1 | \
			pup 'ul[class="listing items lists"]' | \
			sed '/^.*>/d' | \
			sed 's|^ *||g' | \
			grep -o '[0-9]*\.[0-9]' | \
			xargs
		)
		if ! [[ -z "$SpecialEpiCheck2" ]]; then
		InfoFunc "This Series Have Special Episodes"
			for SpecialEpi in $SpecialEpiCheck2; do
				echo "Episode: $SpecialEpi"
			done
		fi
		EpisodeReadPageLoad="$(
			wget -qO- $SpecialEpiCheck1 | \
			pup 'ul[class="listing items lists"]' | \
			pup 'div.name' | \
			sed '/^.*>/d' | \
			sed 's|^ *||g' | \
			sort -V | \
			grep -o 'Episode [0-9].*' | \
			sed 's|Episode ||g'
		)"
		LeastEpiList=$(
			echo "$EpisodeReadPageLoad" | \
			head -1
		)
		LastEpiList=$(
			echo "$EpisodeReadPageLoad" | \
			tail -1
		)
	else
		SpecialEpiCheck1=$(
			echo "$BASE_URL/videos/$SerNameFile-episode-1" | \
			uniq
		)
		SpecialEpiCheck2=$(
			wget -qO- $SpecialEpiCheck1 | \
			pup 'ul[class="listing items lists"]' | \
			sed '/^.*>/d' | \
			sed 's|^ *||g' | \
			grep -o '[0-9]*\.[0-9]' | \
			xargs
		)
		if ! [[ -z "$SpecialEpiCheck2" ]]; then
		InfoFunc "This Series Have Special Episodes"
			for SpecialEpi in $SpecialEpiCheck2; do
				echo "Episode: $SpecialEpi"
			done
		fi
		EpisodeReadPageLoad="$(
			wget -qO- $SpecialEpiCheck1 | \
			pup 'ul[class="listing items lists"]' | \
			pup 'div.name' | \
			sed '/^.*>/d' | \
			sed 's|^ *||g' | \
			sort -V | \
			grep -o 'Episode [0-9].*' | \
			sed 's|Episode ||g'
		)"
		LeastEpiList=$(
			echo "$EpisodeReadPageLoad" | \
			head -1
		)
		LastEpiList=$(
			echo "$EpisodeReadPageLoad" | \
			tail -1
		)
	fi
}

#######################################
#           Range Download            #
#######################################

# Range Downloads are Relying only on one Server (Default to Avoid Bugs)
function DownloadUtilityForRange(){
	if [[ "$EpisodeSelected" =~ "-" ]]; then
		EpiScrape1="$(printf "$EpisodeSelected" | tr '-' "\n")"
		EpiScrape2="$(printf "$EpiScrape1" | head -n -1)"
		EpiScrape3="$(printf "$EpiScrape1" | tail -n -1)"
			if ! [[ $EpiScrape2 =~ [0-9]* ]]; then
				ErrorFunc3a "$EpiScrape2 <- Must be Number"
				exit 1
			elif ! [[ $EpiScrape3 =~ [0-9]* ]]; then
				ErrorFunc3a "$EpiScrape3 <- Must be Number"
				exit 1
			fi
		MainMenuMessage
		InfoFunc "Checking Episodes, Please Wait..."
		for EpiCheck in $(seq $EpiScrape2 $EpiScrape3 | xargs); do
			EPS=$(
				echo "$SerNameFile-episode-$EpiCheck" | \
				uniq
			)
			DetectNotFound=$(
				wget -qO- "$BASE_URL/videos/$EPS"
			)
			if [[ "$DetectNotFound" == *404* ]]; then
				ErrorFunc2c "Episode Not Found, Episode $EpiCheck"
				exit 1
			fi
		done
# For Looping Arithmetic of Episodes
		for ((i=$EpiScrape2;i<=$EpiScrape3;i++)); do
			EPS=$(
				echo "$SerNameFile-episode-$i" | \
				uniq
			)
			LinkFor=$(
				wget -qO- "$BASE_URL/videos/$EPS" | \
				pup 'div.play-video' | \
				grep -o "//[^'\"<>]*" | \
				recode html...utf8 | \
				sed 's|streaming.php|download|g' | \
				sed 's|//|https://|g'
			)
			if [[ "$LinkFor" == "" ]]; then
				ErrorFunc2c "The Episode is Not Released yet (Not Exist)"
				$(basename $0)
			fi
			if [[ $server == "4" ]]; then
				MainDirectLS4=$(
					echo "$MainDirectLS4" | \
					recode html...utf8
				)
				DirectDownLinksList=$MainDirectLS4
			else
				DirectDownLinksList=$(
					wget -qO- "$LinkFor" | \
					pup 'div[class="dowload"]' | \
					grep -o "https[^'\"<>]*" | \
					grep 'gogo-cdn' | \
					tac | \
					xargs
				)
			fi
# Looping to Check Every Link, If it fails proceed to other Quality
			for LISTER in $DirectDownLinksList; do
				ConGrep=$(
					curl -e $BASE_URL -LsI "$LISTER" | \
					grep -i Content-Length | \
					awk '{print $2}' | \
					tr -dc '[:print:]'
				)
				if [[ -z "$ConGrep" ]]; then
					ConGrep="1"
				fi
				if [[ "$ConGrep" -gt "225000" ]]; then
					MainDirectL="$LISTER"
					break
				else
					ErrorCatchFunc "Kek.. Server Down, so Im gonna do my Job to find another server"
				fi
			done
			FILEVIDNAME="$SerNameFile-EPI$i.mp4"
			echo
			InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
			InfoFunc "Now Downloading Episode $i"
			TimeStart=$(date +%s)
			if [[ "$utility" =~ $HHSS ]]; then
				if [ "$utility" == "1" ]; then
					trapDel
					aria2c -x 16 -s 16 --console-log-level=error --referer=$BASE_URL --download-result=hide --auto-save-interval=0 "$MainDirectL" -o "$FILEVIDNAME"
					echo
					TimeElapse=$(date +%s)
					InfoFunc "Downloading Episode $i Done!!"
					AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
				elif [ "$utility" == "2" ]; then
					trapDel1
					DownloaderOwn3 "$MainDirectL" "$FILEVIDNAME"
				fi
			else
				ErrorFunc1e "Invalid Utility Number..."
				exit 1
			fi
		done
	else
		if [[ "$EpisodeSelected" =~ [M|m]ovie ]]; then
			EPS=$(
				echo "$SerNameFile-episode-1" | \
				uniq
			)
			FILEVIDNAME="$SerNameFile-MOVIE.mp4"
		else
			if [[ $EpisodeSelected =~ .*[.].* ]]; then
				EpisodeSelected=$(
				echo "$EpisodeSelected" | tr '.' '-'
				)
			fi
			EPS=$(
				echo "$SerNameFile-episode-$EpisodeSelected" | \
				uniq
			)
			FILEVIDNAME="$SerNameFile-EPI$EpisodeSelected.mp4"
		fi
		CheckersIfAvailable
		ServerGreppers
		QualityPicker
	fi
}

function CheckersIfAvailable(){
	PageLoaderCheck=$(
		wget -qO- "$BASE_URL/videos/$EPS"
	)
	if [[ "$PageLoaderCheck" =~ ^(404)$ ]]; then
		ErrorFunc2c "Episode Not Found"
		exit 1
	fi
	LinkFor=$(
		echo "$PageLoaderCheck" | \
		pup 'div.play-video' | \
		grep -o "//[^'\"<>]*" | \
		recode html...utf8 | \
		sed 's|streaming.php|download|g' | \
		sed 's|//|https://|g'
	)
	if [[ "$LinkFor" == "" ]]; then
		ErrorFunc1d "Returned 404 Not Found"
		exit 1
	elif [[ "$(wget -qO- $LinkFor)" == *"Blocked"* ]]; then
		ErrorFunc2d "Episode Unavailable"
		exit 1
	fi
}


function ServerGreppers(){
	if [[ "$server" =~ $HHSS ]];then
		if [[ "$server" == "default" ]]; then
			DirectDownLinksList=$(
				wget -qO- "$LinkFor" | \
				pup 'div[class="dowload"]' | \
				grep -o "https[^'\"<>]*" | \
				grep 'gogo-cdn' | \
				tac | \
				xargs
			)
			for LISTER in $DirectDownLinksList; do
				ConGrep=$(
					curl -e $BASE_URL -LsI "$LISTER" | \
					grep -i Content-Length | \
					awk '{print $2}' | \
					tr -dc '[:print:]'
				)
				if [[ -z "$ConGrep" ]]; then
					ConGrep="1"
				fi
				if [[ "$ConGrep" -gt "225000" ]]; then
					MainDirectL="$LISTER"
					break
				else
					ErrorCatchFunc "Kek.. Server Down, so Im gonna do my Job to find another server"
				fi
			done
		elif [[ "$server" == "1" ]]; then
			MainDirectLS1=$(
				wget -qO- "$LinkFor" | \
				pup 'div[class="dowload"]' | \
				grep -o "https[^'\"<>]*" | \
				grep 'sbplay'
			)
		elif [[ "$server" == "2" ]]; then
			MainDirectLS2=$(
				wget -qO- "$LinkFor" | \
				pup 'div[class="dowload"]' | \
				grep -o -e "https[^'\"<>]*" -e "http[^'\"<>]*" | \
				grep 'mp4upload'
			)
		elif [[ "$server" == "3" ]]; then
			MainDirectLS3=$(
				wget -qO- "$LinkFor" | \
				pup 'div[class="dowload"]' | \
				grep -o "https[^'\"<>]*" | \
				grep 'fplayer'
			)
		elif [[ "$server" == "4" ]]; then
			MainDirectLS4=$(
				wget -qO- "$LinkFor" | \
				pup 'div[class="dowload"]' | \
				grep -o "https[^'\"<>]*" | \
				grep 'cloudfront'
			)
		fi
	else
		ErrorFunc1e "Invalid Server Value..."
		exit 1
	fi
}

#######################################
#        Download Utilities           #
#######################################

function DownloaderOwn(){
	TimeStart=$(date +%s)
	axel -n 28 --header="Referer: $BASE_URL" "$1" -o "$2" | \
	mawk -W interactive 'NR % 25 == 1' | \
	mawk -W interactive '{print $2" "$8" "$9}' | \
	while read -r Bar; do
		bol1=$(
			echo "$Bar" | \
			awk '{print $1}'
		)
		bol2=$(
			echo "$Bar" | \
			awk '{print $2" "$3}' | \
			sed 's|[][]||g'
		)
		barron=$(
			echo "${bol1//[!0-9]/}"
		)
		if [[ $barron =~ ^([0-9]+)$ ]]; then
			ProgressBarModifiedDown $barron 100 $bol2
		fi
	done
	TimeElapse=$(date +%s)
	echo
	printf "%*s\r%s\r\n" "$(tput cols)" "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish" "$(InfoFunc "Downloading Episode $EpisodeSelected Done!!")"
}

function DownloaderOwn1(){
	TimeStart=$(date +%s)
	axel -n 16 --header="Referer: $RootUrl" "$1" -o "$2" | \
	mawk -W interactive 'NR % 25 == 1' | \
	mawk -W interactive '{print $2" "$8" "$9}' | \
	while read -r Bar; do
		bol1=$(
			echo "$Bar" | \
			awk '{print $1}'
		)
		bol2=$(
			echo "$Bar" | \
			awk '{print $2" "$3}' | \
			sed 's|[][]||g'
		)
		barron=$(
			echo "${bol1//[!0-9]/}"
		)
		if [[ $barron =~ ^([0-9]+)$ ]]; then
			ProgressBarModifiedDown $barron 100 $bol2
		fi
	done
	TimeElapse=$(date +%s)
	echo
	printf "%*s\r%s\r\n" "$(tput cols)" "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish" "$(InfoFunc "Downloading Episode $EpisodeSelected Done!!")"
}

# Only 2 Simultaneous Downloads to Prevent Rate Limiting
# Plus Bypass Certificates, Avoiding to Reject the Request
function DownloaderOwn2(){
	TimeStart=$(date +%s)
	axel -n 2 --insecure --header="Referer: $RootUrl" "$1" -o "$2" | \
	mawk -W interactive 'NR % 25 == 1' | \
	mawk -W interactive '{print $2" "$8" "$9}' | \
	while read -r Bar; do
		bol1=$(
			echo "$Bar" | \
			awk '{print $1}'
		)
		bol2=$(
			echo "$Bar" | \
			awk '{print $2" "$3}' | \
			sed 's|[][]||g'
		)
		barron=$(
			echo "${bol1//[!0-9]/}"
		)
		if [[ $barron =~ ^([0-9]+)$ ]]; then
			ProgressBarModifiedDown $barron 100 $bol2
		fi
	done
	TimeElapse=$(date +%s)
	echo
	printf "%*s\r%s\r\n" "$(tput cols)" "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish" "$(InfoFunc "Downloading Episode $EpisodeSelected Done!!")"
}

function DownloaderOwn3(){
	TimeStart=$(date +%s)
	axel -n 28 --header="Referer: $BASE_URL" "$1" -o "$2" | \
	mawk -W interactive 'NR % 25 == 1' | \
	mawk -W interactive '{print $2" "$8" "$9}' | \
	while read -r Bar; do
		bol1=$(
			echo "$Bar" | \
			awk '{print $1}'
		)
		bol2=$(
			echo "$Bar" | \
			awk '{print $2" "$3}' | \
			sed 's|[][]||g'
		)
		barron=$(
			echo "${bol1//[!0-9]/}"
		)
		if [[ $barron =~ ^([0-9]+)$ ]]; then
			ProgressBarModifiedDown $barron 100 $bol2
		fi
	done
	TimeElapse=$(date +%s)
	echo
	printf "%*s\r%s\r\n" "$(tput cols)" "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish" "$(InfoFunc "Downloading Episode $i Done!!")"
}

#######################################
#         Quality And Servers         #
#######################################

# Default Server
function DefaultQuality(){
	MainDirectLink=$1
	if [[ -z "$MainDirectLink" ]]; then
		ErrorFunc3d "Server Not Found"
		exit 1
	fi
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			TimeStart=$(date +%s)
			trapDel
			aria2c -x 16 -s 16 --console-log-level=error --referer=$BASE_URL --download-result=hide --auto-save-interval=0 "$MainDirectLink" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn "$MainDirectLink" "$FILEVIDNAME"
		fi
	else
		ErrorFunc1e "Invalid Utility Number..."
		exit 1
	fi
}

# SBPlay Server
function Server1(){
	MainDownLink=$1
	if [[ -z "$MainDownLink" ]]; then
		ErrorFunc3d "Server Not Found"
		exit 1
	fi
	RootURL="https://sbplay1.com"
	for QulitySB in 1920 1280 640; do
		VaLMain=$(
			wget -qO- "$MainDownLink" | \
			grep -o '<tr><td><a.*href="#".*onclick="download.*>.*</td>' | \
			grep $QulitySB | \
			awk -F["'"] '{print $2" "$4" "$6}'
		)
		if ! [[ -z $VaLMain ]]; then
			break
		fi
	done
	ID=$(
		echo $VaLMain | \
		awk '{print $1}'
	)
	MODE=$(
		echo $VaLMain | \
		awk '{print $2}'
	)
	HASH=$(
		echo $VaLMain | \
		awk '{print $3}'
	)
	MainDownLink="$RootURL/dl?op=download_orig&id=$ID&mode=$MODE&hash=$HASH"
	MainDirectL=$(
		wget -qO- "$MainDownLink" | \
		grep 'Direct Download' | \
		grep -o "https:[^'\"<>]*"
	)
	MainDirectL=$(echo "$MainDirectL" | tr -d '\n')
	ConGrep=$(
		curl -e "$RootURL" -LsI "$MainDirectL" | \
		grep -i Content-Length | \
		awk '{print $2}' | \
		tr -dc '[:print:]'
	)
	if [[ -z "$ConGrep" ]]; then
		ErrorFunc4d "Server Downed or the File was Deleted due to DMCA Copyright"
		exit 1
	fi
	InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			TimeStart=$(date +%s)
			trapDel
			aria2c -x 16 -s 16 --console-log-level=error --referer=$RootURL --download-result=hide --auto-save-interval=0 "$MainDirectL" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn1 "$MainDirectL" "$FILEVIDNAME"
		fi
	else
		ErrorFunc1e "Invalid Utility Number..."
		exit 1
	fi
}

# MP4 Upload Server
function Server2(){
	MainDownLink=$1
	if [[ -z "$MainDownLink" ]]; then
		ErrorFunc3d "Server Not Found"
		exit 1
	fi
	RootUrl="https://www.mp4upload.com"
	if [[ "$(echo "$MainDownLink" | awk -F[://] '{print $1}')" == "http" ]]; then
		MainDownLink=$(
			echo "$MainDownLink" | \
			sed 's|http://|https://|g'
		)
	fi
# 1st Connection Bridge
	ID=$(
		wget -qO- $MainDownLink | \
		pup 'input[type="hidden"]' | \
		grep 'name="id"' | \
		awk -F['"'] '{print $6}'
	)
	FNAME=$(
		wget -qO- $MainDownLink | \
		pup 'input[type="hidden"]' | \
		grep 'name="fname"' | \
		awk -F['"'] '{print $6}'
	)
	OUT=$(curl -s -X POST -d "op=download1&usr_login=&id=$ID&fname=$FNAME&referer=&method_free=+" "$MainDownLink")
	echo $OUT > /dev/null #
# 2nd Connection Bridge
	ID=$(
		wget -qO- "$MainDownLink" | \
		pup 'input[type="hidden"]' | \
		grep 'name="id"' | \
		awk -F['"'] '{print $6}'
	)
	MainDirectLink=$(
		curl -sD- -ke "$RootUrl" -X POST -d "op=download2&id=$ID&rand=&referer=$MainDownLink&method_free=+&method_premium=" "$MainDownLink"
	)
	MainDirectLUni=$(
		echo "$MainDirectLink" | \
		grep location | \
		awk '{print $2}' | \
		sed $'s/[^[:print:]\t]//g'
	)
	ConGrep=$(
		curl -e "$RootUrl" -LskI "$MainDirectLUni" | \
		grep -i Content-Length | \
		awk '{print $2}' | \
		tr -dc '[:print:]'
	)
	if [[ -z "$ConGrep" ]]; then
		ErrorFunc4d "Server Downed or the File was Deleted due to DMCA Copyright"
		exit 1
	fi
	InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			TimeStart=$(date +%s)
			trapDel
			aria2c -x 2 -s 2 --console-log-level=error --referer "$RootUrl" --check-certificate=false --download-result=hide --auto-save-interval=0 "$MainDirectLUni" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn2 "$MainDirectLUni" "$FILEVIDNAME"
		fi
	else
		ErrorFunc1e "Invalid Utility Number..."
		exit 1
	fi
}

# FPlayer Server
function Server3(){
	MainDownLink=$1
	if [[ -z "$MainDownLink" ]]; then
		ErrorFunc3d "Server Not Found"
		exit 1
	fi
	GetAPIServ1=$(
		wget -qO- "$MainDownLink" | \
		grep '$.post' | \
		awk -F["'"] '{print $2}' | \
		sed 's|/api|https://fplayer.info/api|g'
	)
	DirectDownLinksList=$(
		curl -s -X POST -e "https://fplayer.info" "$GetAPIServ1" | \
		grep -o "https:[^'\"<>]*" | \
		grep 'fvs' | \
		tr -d '\\' | \
		tac | \
		xargs
	)
	for LISTER in $DirectDownLinksList; do
		ConGrep=$(
			curl -e "$RootURL" -LksI "$LISTER" | \
			grep -i Content-Length | \
			awk '{print $2}' | \
			tr -dc '[:print:]'
		)
		if [[ -z "$ConGrep" ]]; then
			ConGrep="1"
		fi
		if [[ "$ConGrep" -gt "225000" ]]; then
			MainDownL="$LISTER"
			break
		else
			ErrorCatchFunc "Kek.. Server Down, so Im gonna do my Job to find another server"
		fi
	done
	InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			TimeStart=$(date +%s)
			trapDel
			aria2c -x 2 -s 2 --console-log-level=error --referer=$RootURL --check-certificate=false --download-result=hide --auto-save-interval=0 "$MainDownL" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn1 "$MainDownL" "$FILEVIDNAME"
		fi
	else
		ErrorFunc1e "Invalid Utility Number..."
		exit 1
	fi
}

# Blast Server 100MBPS+
function Server4(){
	DirectDownLinksList=$1
	DirectDownLinksList=$(
		echo "$DirectDownLinksList" | \
		recode html...utf8
	)
	if [[ -z "$DirectDownLinksList" ]]; then
		ErrorFunc3d "Server Not Found"
		exit 1
	fi
	for LISTER in $DirectDownLinksList; do
		ConGrep=$(
			curl -e "$RootURL" -LsI "$LISTER" | \
			grep -i Content-Length | \
			awk '{print $2}' | \
			tr -dc '[:print:]'
		)
		if [[ -z "$ConGrep" ]]; then
			ConGrep="1"
		fi
		if [[ "$ConGrep" -gt "225000" ]]; then
			MainDownL="$LISTER"
			break
		else
			ErrorCatchFunc "Kek.. Server Down, so Im gonna do my Job to find another server"
		fi
	done
	InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			TimeStart=$(date +%s)
			trapDel
			aria2c -x 16 -s 16 --console-log-level=error --download-result=hide --auto-save-interval=0 "$MainDownL" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn "$MainDownL" "$FILEVIDNAME"
		fi
	else
		ErrorFunc1e "Invalid Utility Number..."
		exit 1
	fi
}

function LowQuality(){
	MainDirectL=$(
		wget -qO- "$LinkFor" | \
		pup 'div[class="dowload"]' | \
		grep -o "https[^'\"<>]*" | \
		grep 'gogo-cdn' | \
		tail -3 | \
		head -1
	)
	ConGrep=$(
		curl -e $BASE_URL -LsI "$MainDirectL" | \
		grep -i Content-Length | \
		awk '{print $2}' | \
		tr -dc '[:print:]'
	)
	if [[ -z "$ConGrep" ]]; then
		ErrorFunc4d "Server Downed or the File was Deleted due to DMCA Copyright"
		exit 1
	fi
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			trapDel
			aria2c -x 16 -s 16 --console-log-level=error --referer=$BASE_URL --download-result=hide --auto-save-interval=0 "$MainDirectL" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn "$MainDirectL" "$FILEVIDNAME"
		fi
	else
		ErrorFunc1e "Invalid Utility Number..."
		exit 1
	fi
}

function Server1Low(){
	MainDownLink=$1
	if [[ -z "$MainDownLink" ]]; then
		ErrorFunc3d "Server Not Found"
		exit 1
	fi
	RootURL="https://sbplay1.com"
	VaLMain=$(
		wget -qO- "$MainDownLink" | \
		grep -o '<tr><td><a.*href="#".*onclick="download.*>.*</td>' | \
		grep 640 | \
		awk -F["'"] '{print $2" "$4" "$6}'
	)
	ID=$(
		echo $VaLMain | \
		awk '{print $1}'
	)
	MODE=$(
		echo $VaLMain | \
		awk '{print $2}'
	)
	HASH=$(
		echo $VaLMain | \
		awk '{print $3}'
	)
	MainDownLink="$RootURL/dl?op=download_orig&id=$ID&mode=$MODE&hash=$HASH"
	MainDirectL=$(
		wget -qO- "$MainDownLink" | \
		grep 'Direct Download' | \
		grep -o "https:[^'\"<>]*"
	)
	MainDirectL=$(echo "$MainDirectL" | tr -d '\n')
	ConGrep=$(
		curl -e "$RootURL" -LsI "$MainDirectL" | \
		grep -i Content-Length | \
		awk '{print $2}' | \
		tr -dc '[:print:]'
	)
	if [[ -z "$ConGrep" ]]; then
		ErrorFunc3d "Server Not Found"
		exit 1
	fi
	InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			TimeStart=$(date +%s)
			trapDel
			aria2c -x 16 -s 16 --console-log-level=error --referer=$RootURL --download-result=hide --auto-save-interval=0 "$MainDirectL" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn1 "$MainDirectL" "$FILEVIDNAME"
		fi
	else
		ErrorFunc1e "Invalid Utility Number..."
		exit 1
	fi
}

function QualityPicker(){
	if [[ $QualityPicker = "" ]]; then
		ErrorFunc1a "You Entered Nothing"
		sleep 2
		unset QualityPicker
		OverAllInputs
	elif [[ ! $QualityPicker =~ ^([H|h]igh|[L|l]ow*)$ ]]; then
		ErrorFunc2a "Undefined Option, Bruh just pick between (High, Low) Server"
		sleep 2
		unset QualityPicker
		OverAllInputs
	fi
	case $QualityPicker in
		high|High)
			if [[ "$server" =~ $HHSS ]]; then
				if [[ "$server" == "default" ]]; then
					MainMenuMessage
					InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
					DefaultQuality "$MainDirectL"
					exit 0
				elif [[ "$server" == "1" ]]; then
					MainMenuMessage
					Server1 "$MainDirectLS1"
					exit 0
				elif [[ "$server" == "2" ]]; then
					MainMenuMessage
					Server2 "$MainDirectLS2"
					exit 0
				elif [[ "$server" == "3" ]]; then
					MainMenuMessage
					Server3 "$MainDirectLS3"
					exit 0
				elif [[ "$server" == "4" ]]; then
					MainMenuMessage
					Server4 "$MainDirectLS4"
					exit 0
				fi
			else
				ErrorFunc1e "Invalid Server Value..."
				exit 1
			fi
		;;
	low|Low)
		if [[ "$server" =~ $HHSS ]];then
			if [[ $server == "default" ]]; then
				InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
				LowQuality
				exit 0
			elif [[ $server == "1" ]]; then
				Server1Low "$MainDirectLS1"
			else
				ErrorFunc2e "Low Quality only Available in Default Server and Server 1"
				exit 1
			fi
		fi
	esac
}

function SearchArgsInf(){
	KeyWord=$1
	{
		wget -qO- "https://gogoanime.cm/search.html?keyword=$KeyWord"
		wget -qO- "https://gogoanime.cm/search.html?keyword=$KeyWord&page=2"
	} | \
	pup 'p[class="name"]' | \
	grep -o "<a.*href=".*".*title=".*">" | \
	grep -o 'title=".*"' | \
	awk -F['"'] '{print $2}' | \
	while read -r wiffles; do
		if [[ $(echo $wiffles | wc -m) -gt 49 ]]; then
			echo ${wiffles:0:49}..${wiffles:($(echo $wiffles | wc -m)-10):$(echo $wiffles | wc -m)}
		else 
			echo ${wiffles}
		fi
	done | \
	cat -n | \
	sed 's/\t/+ /g' | \
	sed 's/^ *//g' | \
	printTable '+' "Num+Anime Name\n$(awk '{print $0}')"
	read -p "$(InputSign 'Enter a Number: ')" SelectedQuery
	QuerySelectLink=$(
		wget -qO- "https://gogoanime.cm/search.html?keyword=$KeyWord" | \
		pup 'p[class="name"]' | \
		grep -o "/category/[^'\"<>]*" | \
		sed 's|/category/|https://gogoanime.cm/category/|g' | \
		sed -n "$SelectedQuery"p
	)
	QuerySelectLinkLoad=$(
		wget -qO- "$QuerySelectLink"
	)
	TyPe=$(
		echo "$QuerySelectLinkLoad" | \
		pup 'p.type' | \
		grep -o '.*/sub-category/.*' | \
		grep -o 'title=".*' | \
		sed 's|title="||g' | \
		sed 's|\">||g' | \
		xargs
	)
	GenRe=$(
		echo "$QuerySelectLinkLoad" | \
		pup 'p.type' | \
		grep -o '.*/genre/.*' | \
		grep -o 'title=".*' | \
		sed 's|title="||g' | \
		sed 's|\">||g' | \
		xargs | \
		sed 's| |, |g'
	)
	StaTus=$(
		echo "$QuerySelectLinkLoad" | \
		pup 'p.type' | \
		xargs | \
		grep -o "Status: </span>.*</a>" | \
		grep -o "title=.*>" | \
		grep -o '>.*<' | \
		tr -d "<>"
	)
	ReleaseDate=$(
		echo "$QuerySelectLinkLoad" | \
		pup 'p.type' | \
		grep -oE "20[0-2][0-9]|1[0-9][0-9][0-9]" | \
		uniq
	)
	echoterd "Anime Information:"
	echoterd "Type: $TyPe"
	echoterd "Genre: $GenRe"
	echoterd "Released: $ReleaseDate"
	echoterd "Status:$StaTus"
	exit 0
}

#######################################
#            Args Parsers             #
#######################################

function ParseArgs(){
	while getopts ":dhvi:s:e:q:m:t:p:" opt; do
		case "${opt}" in
			d)
				if [[ $EUID -ne 0 ]]; then
					ErrorFunc1e 'Give this script Sudo Permission'
					InfoFunc "Run: sudo $(basename $0) -d"
					exit 1
				fi
				unset modeload infarg AnimeSearch EpisodeSelected QualityPicker
				tput reset
				FileDir="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )/$(basename $0)"
				rm $FileDir
				rm -r /etc/emina
				for barmod in $(seq 1 100); do
					sleep 0.001
					ProgressBarModifiedUnin ${barmod} 100
				done
				printf '\n'
				InfoFunc "Uninstalling Completed!"
				exit 0
				;;
			h)
				unset modeload infarg AnimeSearch EpisodeSelected QualityPicker
				ErrorHelp | column -ts '#' | sed 's|                               ||g'
				exit 0
				;;
			v)
				unset modeload infarg AnimeSearch EpisodeSelected QualityPicker
				echo "v0.6 Beta (Currently on Beta Test, Unstable Version)"
				exit 0
				;;
			m)
				modeload=${OPTARG}
				case $OPTARG in
					dub)
						DUBMODE="1"
						;;
					*)
						ErrorFunc1f "Don't Present this Argument if you want Regular English Subs"
						ErrorHelp | column -ts '#' | sed 's|                               ||g'
						exit 1
				esac
				;;
			i)
				if [[ ${OPTARG} == "" ]]; then
					ErrorFunc2f "Search Query Must not be empty"
					ErrorHelp | column -ts '#' | sed 's|                               ||g'
					exit 1
				fi
				case $OPTARG in
					-s|-e|-q|-t|-p)
						ErrorFunc3f "Search Query is Not Specified"
						ErrorHelp | column -ts '#' | sed 's|                               ||g'
						exit 1
						;;
					*)
						infarg=${OPTARG}
						SearchArgsInf "$infarg"
						;;
				esac
				exit 0
				;;
			s)
				if [[ ${OPTARG} == "" ]]; then
					ErrorFunc2f "Search Query Must not be empty"
					ErrorHelp | column -ts '#' | sed 's|                               ||g'
					exit 1
				fi
				case $OPTARG in
					-i|-e|-q|-t|-p)
						ErrorFunc3f "Search Query is Not Specified"
						ErrorHelp | column -ts '#' | sed 's|                               ||g'
						exit 1
						;;
					*)
						AnimeSearch=${OPTARG}
						;;
				esac
				;;
			e)
				if [[ ${OPTARG} == "" ]]; then
					ErrorFunc3f "Episode Number Must not be empty"
					ErrorHelp | column -ts '#' | sed 's|                               ||g'
					exit 1
				fi
				case $OPTARG in
					-s|-i|-q|-t|-p)
						ErrorFunc3f "Episode Number is Not Specified"
						ErrorHelp | column -ts '#' | sed 's|                               ||g'
						exit 1
						;;
					*)
						EpisodeSelected=${OPTARG}
						;;
				esac
				;;
			q)
				if [[ ${OPTARG} == "" ]]; then
					ErrorFunc3f "Quality Value Must not be empty"
					ErrorHelp | column -ts '#' | sed 's|                               ||g'
					exit 1
				fi
				case $OPTARG in
					high|High|low|Low)
						QualityPicker=${OPTARG}
						;;
					*)
						ErrorFunc1f "${OPTARG} is a Invalid Quality"
						ErrorHelp | column -ts '#' | sed 's|                               ||g'
						exit 1
						;;
				esac
				;;
			t)
				if [[ ${OPTARG} == "" ]]; then
					ErrorFunc3f "Quality Value Must not be empty"
					ErrorHelp | column -ts '#' | sed 's|                               ||g'
					exit 1
				fi
				case $OPTARG in
					default|1|2|3|4)
						server=${OPTARG}
						;;
					*)
						ErrorFunc1f "${OPTARG} is a Invalid Server Number"
						ErrorHelp | column -ts '#' | sed 's|                               ||g'
						exit 1
						;;
				esac
				;;
			p)
				if [[ ${OPTARG} == "" ]]; then
					ErrorFunc3f "Quality Value Must not be empty"
					ErrorHelp | column -ts '#' | sed 's|                               ||g'
					exit 1
				fi
				case $OPTARG in
					[0-9]*)
						SeriesSelected=${OPTARG}
						;;
					*)
						ErrorFunc3a "${OPTARG} is Must be Number"
						ErrorHelp | column -ts '#' | sed 's|                               ||g'
						exit 1
						;;
				esac
				;;
			\?)
				ErrorFunc4f "[ ${OPTARG}: is not valid Argument ]"
				ErrorHelp | column -ts '#' | sed 's|                               ||g'
				exit 1
				;;
			:)
				ErrorFunc4f "[ ${OPTARG} Argument must have a Value ]"
				ErrorHelp | column -ts '#' | sed 's|                               ||g'
				exit 1
				;;
		esac
	done
	shift $((OPTIND -1))
}

function ErrorHelp(){
	echo -e 'Usage: emina-cli -i "<search query>"'
	echo -e 'Usage: emina-cli -s "<search query>" -e "[Episode]" -q "High" -m [Mode]'
	echo -e 'Usage: emina-cli [arguments...]'
	echo -e '͐'
	echo -e "Program that allows you to download anime in command line."
	echo -e '͐'
	echo -e "Options:"
	echo -e "   -d#: Uninstall Script with its Config Files"
	echo -e "   -v#: Show the version of the script"
	echo -e "   -m dub#: Switch to Dub Mode (Dubbed Anime Only)"
	echo -e '   -i "<search query>"#: Search Anime and Print Info'
	echo -e '   -s "<search query>"#: Search Anime'
	echo -e '   -e "[episode]"#: Number of Episode'
	echo -e '   -q "[quality]"#: Quality of Video'
	echo -e '   -p "[number]"#: Specify Picks in Anime Selection'
	echo -e '   -t "[server]"#: Specify Server (default, 1, 2, 3, 4)'
	echo -e "   -h#: Show this help"
	echo -e '͐'
	printf 'You can change Servers or Download Method by changing the value of the "server or utility" variable in ' && tput setab 8 && printf '/etc/emina/down.conf' && tput sgr 0
	printf '\n'
	echo -e '͐'
	printf 'Option "-d" is to Uninstall this Script with ' && tput setab 8 && printf '/etc/emina/down.conf & /etc/emina/eminavars' && tput sgr 0 && printf ' But it wont delete all the prerequisites/dependencies that installed by this script (it can be used for other scripts)..'
	printf '\n'
	echo -e '͐'
	printf 'Option "-t" will specify which server will used to download the File, if this argument presented it will ignore the Config File where the automation stored to set the server..'
	printf '\n'
	echo -e '͐'
}

#######################################
#           Main Functions            #
#######################################

function MainFunction(){
	OverAllInputs
	DownloadUtilityForRange
}

InstallPrerequisites
ParseArgs "$@"
MainFunction
