#!/bin/bash
#
# emina-cli is a Free OpenSource Anime Downloader for Linux
# 
#                    Version: v0.1 Beta
#                        Statistics:
#                     Total Words: 3629
#                  Total Character: 27784
#                     Total Lines: 1028
# 
#   Please do not sell this Script, Its Free..
#   Author: TheGlock
#
#

BASE_URL="https://gogoplay1.com"
REGNUMBERONLY="^([M|m]ovie|[0-9][0-9]*|[0-9]*.[0-9])+$"
NOPUNCTUATIONS='['!'@#\$%^\&*()_+€£¥₩÷×~`¡¿<>%+{}]'
RANGEREGNUMBONLY="^([M|m]ovie|[0-9]*-[0-9]*|[0-9]*)$"

if [ -f /etc/emina/down.conf ]; then
	source /etc/emina/down.conf
	HHSS="^[0-9]$|[D|d]efault"
else
	mkdir -p /etc/emina
	wget -q -O /etc/emina/down.conf "https://raw.githubusercontent.com/TheGlockMisc/emina-cli/main/files/down.conf"
	source /etc/emina/down.conf
	HHSS="^[0-9]$|[D|d]efault"
fi
if [ -f /etc/emina/eminavars ]; then
	source /etc/emina/eminavars
else
	wget -q -O /etc/emina/eminavars "https://raw.githubusercontent.com/TheGlockMisc/emina-cli/main/files/eminavars"
	source /etc/emina/eminavars
fi

# Automated Install Packages and Checks
function InstallPrerequisites(){
	if ! [ -f /usr/local/sbin/$(basename $0) ]; then
		FileDir="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )/$(basename $0)"
		cp $FileDir /usr/local/sbin/$(basename $0)
		chmod +x /usr/local/sbin/$(basename $0)
		rm $FileDir
		InfoFunc "The File was Moved!! You Can Execute it in any Directory"
		InfoFunc "Run: $(basename $0)"
		exit 1
	fi
# If the machine was not Updated/Upgraded in a Month
	if [[ -f "/var/lib/apt/periodic/update-success-stamp" ]]; then
		LAST_UPDATED=$( stat --format="%X" /var/lib/apt/periodic/update-success-stamp )
		UNIX_TIME=$( date +%s )
		TIME_DIFF=$(( UNIX_TIME - LAST_UPDATED ))
			if [[ "${TIME_DIFF}" -gt 2629746 ]]; then
				sudo apt-get update -y
				sudo apt-get upgrade -y
			fi
	else
		sudo apt-get update -y
		sudo apt-get upgrade -y
	fi
	for packages in figlet aria2c recode axel ruby; do
		if ! [ -x "$(command -v $packages)" ]; then
			yes | sudo apt install $packages
			clear
		fi
	done
	if ! [ -x "$(command -v go)" ]; then
		yes | sudo apt install golang
	fi
    if ! [ -x "$(command -v lolcat)" ]; then
        gem install lolcat
    fi
    if ! [ -x "$(command -v pup)" ]; then
		go get github.com/ericchiang/pup
		export GOROOT=/usr/bin/go
		mv /root/go/bin/pup /usr/bin/pup
		chmod +x /usr/bin/pup
	elif [ -z "$(pup --version)" ]; then
		go get github.com/ericchiang/pup
		export GOROOT=/usr/bin/go
		mv /root/go/bin/pup /usr/bin/pup
		chmod +x /usr/bin/pup
	fi
	for check in figlet aria2c recode axel ruby; do
		if [[ -z "$(which $check)" ]]; then
			ErrorFunc "Package $check is not installed."
			InfoFunc "Rerun this Script again"
			exit 1
		fi
	done
}

function SearchForAnime(){
	MainMenuMessage
	read -p "$(InputSign 'Search Anime: ')" AnimeSearch
	if [[ $AnimeSearch = "" ]]; then
		ErrorFunc "You typed Nothing, CTRL + C to Exit"
		sleep 3
		SearchForAnime
    elif [[ $AnimeSearch =~ $NOPUNCTUATIONS ]]; then
		ErrorFunc "Anime Name Mustn't have Punctuations Marks"
		sleep 3
		SearchForAnime
	fi
    AnimeSearch=$(
		echo "$AnimeSearch" | \
		tr " " +
	)
	QueryDetect=$(
		{
			wget -qO- "$BASE_URL/search.html?keyword=$AnimeSearch"
			wget -qO- "$BASE_URL/search.html?keyword=$AnimeSearch&page=2"
		} | \
		pup 'div.name' | \
		sed '/^<div.*/d' | \
		sed '/^<\/.*>/d' | \
		sed 's/^ //g' | \
		sed 's| Episode.*[0-9]*||g' | \
		uniq | \
		cat -n | \
		sed 's/\t/) /g' | \
		sed 's/^ *//g'
	)
    if [[ $QueryDetect = "" ]]; then
		ErrorFunc "Seems Like No Anime Exist Based on Your Search, Try Again"
		sleep 2
		SearchForAnime
	fi
}

function SeriesSelector(){
	{
		wget -qO- "$BASE_URL/search.html?keyword=$AnimeSearch"
		wget -qO- "$BASE_URL/search.html?keyword=$AnimeSearch&page=2"
	} | \
	pup 'div.name' | \
	sed '/^<div.*/d' | \
	sed '/^<\/.*>/d' | \
	sed 's/^ //g' | \
	sed 's| Episode.*[0-9]*||g' | \
	uniq | \
	while read -r wiffles; do
		if [[ $(echo $wiffles | wc -m) -gt 49 ]]; then
			echo ${wiffles:0:49}..${wiffles:($(echo $wiffles | wc -m)-10):$(echo $wiffles | wc -m)}
		else 
			echo ${wiffles}
		fi
	done | \
	cat -n | \
	sed 's/\t/+ /g' | \
	sed 's/^ *//g' | \
	printTable '+' "Num+Anime Name\n$(awk '{print $0}')"
	read -p "$(InputSign 'Pick a Number: ')" SeriesSelected
	if [[ $SeriesSelected =~ $NOPUNCTUATIONS ]]; then
		ErrorFunc "Anime Name Mustn't have Punctuations Marks"
		SeriesSelector
	elif [[ $SeriesSelected = "" ]]; then
		ErrorFunc "You Entered Nothing"
		SeriesSelector
	elif [[ ! $SeriesSelected =~ $REGNUMBERONLY ]]; then
        ErrorFunc 'Number Only Allowed'
        SeriesSelector
    fi
	SeriesLinkPicked=$(
		{
		wget -qO- "$BASE_URL/search.html?keyword=$AnimeSearch"
		wget -qO- "$BASE_URL/search.html?keyword=$AnimeSearch&page=2"
		} | \
		pup 'li.video-block' | \
		grep -o "/videos/[^'\"<>]*" | \
		sed -n "$SeriesSelected"p | \
		sed "s|/videos|$BASE_URL/videos|g" | \
		sed 's|-episode-[0-9].*||g'
	)
	SerNameFile=$(
		echo "$SeriesLinkPicked" | \
		awk -F[/] '{print $5}'
	)
}

function EpisodeSelector(){
	SpecialEpiCheck1=$(
		echo "$SerNameFile-episode-1" | \
		uniq
	)
	SpecialEpiCheck2=$(
		wget -qO- "$BASE_URL/videos/$SpecialEpiCheck1 | xargs"
	)
	SpecialEpiCheck3=$(
		wget -qO- $SpecialEpiCheck2 | \
		pup 'div.name' | \
		sed '/^<div.*/d' | \
		sed '/^<\/.*>/d' | \
		grep -o '[0-9]*\.[0-9]' | \
		xargs
	)
	if ! [[ -z "$SpecialEpiCheck3" ]]; then
	InfoFunc "This Series Have Special Episodes"
		for SpecialEpi in $SpecialEpiCheck3; do
			echo "Episode: $SpecialEpi"
		done
	fi
	read -p "$(InputSign 'Episode: ')" EpisodeSelected
	if [[ ! $EpisodeSelected =~ $RANGEREGNUMBONLY ]]; then
		ErrorFunc 'Number Only Allowed'
		EpisodeSelector
	elif [[ $EpisodeSelected -gt 1000 ]]; then
		ErrorFunc "Out of range (1-1000) Episode only"
		EpisodeSelector
	elif [[ $EpisodeSelected = "" ]]; then
		ErrorFunc "You Entered Nothing"
		EpisodeSelector
	fi
}

#######################################
#           Range Download            #
#######################################

# Range Downloads are Relying only on one Server
function DownloadUtilityForRange(){
	if [[ "$EpisodeSelected" =~ "-" ]]; then
		EpiScrape1="$(printf "$EpisodeSelected" | tr '-' "\n")"
		EpiScrape2="$(printf "$EpiScrape1" | head -n -1)"
		EpiScrape3="$(printf "$EpiScrape1" | tail -n -1)"
			if ! [[ $EpiScrape2 =~ [0-9]* ]]; then
				ErrorFunc "$EpiScrape2 <- Must be Number"
				exit 1
			fi
			if ! [[ $EpiScrape3 =~ [0-9]* ]]; then
				ErrorFunc "$EpiScrape3 <- Must be Number"
				exit 1
			fi
		MainMenuMessage
		InfoFunc "Checking Episodes, Please Wait..."
		for EpiCheck in $(seq $EpiScrape2 $EpiScrape3 | xargs); do
			EPS=$(
				echo "$SerNameFile-episode-$EpiCheck" | \
				uniq
			)
			DetectNotFound=$(
				wget -qO- "$BASE_URL/videos/$EPS | xargs"
			)
			if [[ "$DetectNotFound" == "404" ]]; then
				ErrorFunc "Episode Not Found, Episode $EpiCheck"
				exit 1
			fi
		done
		for ((i=$EpiScrape2;i<=$EpiScrape3;i++)); do
			EPS=$(
				echo "$SerNameFile-episode-$i" | \
				uniq
			)
			LinkFor=$(
				wget -qO- "$BASE_URL/videos/$EPS" | \
				pup 'div.play-video' | \
				grep -o "//[^'\"<>]*" | \
				recode html...utf8 | \
				sed 's|streaming.php|download|g' | \
				sed 's|//|https://|g'
			)
			MainDirectL=$(
				wget -qO- "$LinkFor" | \
				pup 'div[class="dowload"]' | \
				grep -o "https[^'\"<>]*" | \
				grep 'gogo-cdn' | \
				tail -1
			)
			if [[ "$LinkFor" == *"404"* ]]; then
				ErrorFunc "The Episode is Not Released yet (Not Exist)"
				$(basename $0)
			fi
			ConGrep=$(
				curl -e $BASE_URL -LsI "$MainDirectL" | \
				grep -i Content-Length | \
				awk '{print $2}' | \
				tr -dc '[:print:]'
			)
			if [[ -z "$ConGrep" ]]; then
				ConGrep="1"
			fi
			if [[ "$ConGrep" -lt "225000" ]]; then
				ErrorCatchFunc "Kek.. Server Down, so I'm gonna do my Job to find another server"
				MainDirectL=$(
					wget -qO- "$LinkFor" | \
					pup 'div[class="dowload"]' | \
					grep -o "https[^'\"<>]*" | \
					grep 'gogo-cdn' | \
					tail -2 | \
					head -1
				)
			fi
			FILEVIDNAME="$SerNameFile-EPI$i.mp4"
			InfoFunc "Now Downloading Episode $i"
			TimeStart=$(date +%s)
			if [[ "$utility" =~ $HHSS ]]; then
				if [ "$utility" == "1" ]; then
					trapDel
					aria2c -x 16 -s 16 --console-log-level=error --referer=$BASE_URL --download-result=hide --auto-save-interval=0 "$MainDirectL" -o $FILEVIDNAME
					echo
					TimeElapse=$(date +%s)
					InfoFunc "Downloading Episode $i Done!!"
					AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
				elif [ "$utility" == "2" ]; then
					trapDel1
					DownloaderOwn "$MainDirectL"
				fi
			else
				ErrorFunc "Invalid Utility Number..."
				exit 1
			fi
		done
	else
		if [[ "$EpisodeSelected" =~ [M|m]ovie ]]; then
			EPS=$(
				echo "$SerNameFile-episode-1" | \
				uniq
			)
			FILEVIDNAME="$SerNameFile-MOVIE.mp4"
		else
			EPS=$(
				echo "$SerNameFile-episode-$EpisodeSelected" | \
				uniq
			)
			FILEVIDNAME="$SerNameFile-EPI$EpisodeSelected.mp4"
		fi
		CheckersIfAvailable
		ServerGreppers
		QualityPicker
	fi
}

function CheckersIfAvailable(){
	DetectNotFound=$(
		wget -qO- "$BASE_URL/videos/$EPS | xargs"
	)
	if [[ "$DetectNotFound" == "404" ]]; then
		ErrorFunc "Episode Not Found"
		exit 1
	fi
	LinkFor=$(
		wget -qO- "$BASE_URL/videos/$EPS" | \
		pup 'div.play-video' | \
		grep -o "//[^'\"<>]*" | \
		recode html...utf8 | \
		sed 's|streaming.php|download|g' | \
		sed 's|//|https://|g'
	)
	if [[ "$LinkFor" == "" ]]; then
		ErrorFunc "Returned 404 Not Found"
		exit 1
	elif [[ "$(wget -qO- $LinkFor)" == *"Blocked"* ]]; then
		ErrorFunc "Episode Unavailable"
		exit 1
	fi
}

function ServerGreppers(){
	if [[ "$server" =~ $HHSS ]];then
		if [[ "$server" == "default" ]]; then
			MainDirectL=$(
				wget -qO- "$LinkFor" | \
				pup 'div[class="dowload"]' | \
				grep -o "https[^'\"<>]*" | \
				grep 'gogo-cdn' | \
				tail -1
			)
			ConGrep=$(
				curl -e $BASE_URL -LsI "$MainDirectL" | \
				grep -i Content-Length | \
				awk '{print $2}' | \
				tr -dc '[:print:]'
			)
			if [[ -z "$ConGrep" ]]; then
				ConGrep="1"
			fi
			if [[ "$ConGrep" -lt "225000" ]]; then
				ErrorCatchFunc "Kek.. Server Down, so I'm gonna do my Job to find another server"
				MainDirectL=$(
					wget -qO- "$LinkFor" | \
					pup 'div[class="dowload"]' | \
					grep -o "https[^'\"<>]*" | \
					grep 'gogo-cdn' | \
					tail -2 | \
					head -1
				)
				ConGrep=$(
					curl -e "$BASE_URL" -LsI "$MainDirectL" | \
					grep -i Content-Length | \
					awk '{print $2}' | \
					tr -dc '[:print:]'
				)
			fi
		elif [[ "$server" == "1" ]]; then
			MainDirectLS1=$(
				wget -qO- "$LinkFor" | \
				pup 'div[class="dowload"]' | \
				grep -o "https[^'\"<>]*" | \
				grep 'sbplay'
			)
		elif [[ "$server" == "2" ]]; then
			MainDirectLS2=$(
				wget -qO- "$LinkFor" | \
				pup 'div[class="dowload"]' | \
				grep -o -e "https[^'\"<>]*" -e "http[^'\"<>]*" | \
				grep 'mp4upload'
			)
		elif [[ "$server" == "3" ]]; then
			MainDirectLS3=$(
				wget -qO- "$LinkFor" | \
				pup 'div[class="dowload"]' | \
				grep -o "https[^'\"<>]*" | \
				grep 'fplayer'
			)
		fi
	else
		ErrorFunc "Invalid Server Value..."
		exit 1
	fi
}

#######################################
#        Download Utilities           #
#######################################

function DownloaderOwn(){
	TimeStart=$(date +%s)
	axel -n 28 --header="Referer: $BASE_URL" "$1" -o "$2" | \
	mawk -W interactive 'NR % 25 == 1' | \
	mawk -W interactive '{print $1" "$2" "$8" "$9}' | \
	while read -r i; do
		printf "%*s\r%s\r" "$(tput cols)" "$(echo $i | awk '{print $3" "$4}')" "$(echo $i | awk '{print $1" "$2}')"
	done
	TimeElapse=$(date +%s)
	printf "%*s\r%s\r\n" "$(tput cols)" "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish" "$(InfoFunc "Downloading Episode $EpisodeSelected Done!!")"
}

function DownloaderOwn1(){
	TimeStart=$(date +%s)
	axel -n 16 --header="Referer: $RootUrl" "$1" -o "$2" | \
	mawk -W interactive 'NR % 25 == 1' | \
	mawk -W interactive '{print $1" "$2" "$8" "$9}' | \
	while read -r i; do
		printf "%*s\r%s\r" "$(tput cols)" "$(echo $i | awk '{print $3" "$4}')" "$(echo $i | awk '{print $1" "$2}')"
	done
	TimeElapse=$(date +%s)
	printf "%*s\r%s\r\n" "$(tput cols)" "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish" "$(InfoFunc "Downloading Episode $EpisodeSelected Done!!")"
}

# Only 2 Simultaneous Downloads to Prevent Rate Limiting
# Plus Bypass Certificates, Avoiding to Reject the Request
function DownloaderOwn2(){
	TimeStart=$(date +%s)
	axel -n 2 --insecure --header="Referer: $RootUrl" "$1" -o "$2" | \
	mawk -W interactive 'NR % 25 == 1' | \
	mawk -W interactive '{print $1" "$2" "$8" "$9}' | \
	while read -r i; do
		printf "%*s\r%s\r" "$(tput cols)" "$(echo $i | awk '{print $3" "$4}')" "$(echo $i | awk '{print $1" "$2}')"
	done
	TimeElapse=$(date +%s)
	printf "%*s\r%s\r\n" "$(tput cols)" "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish" "$(InfoFunc "Downloading Episode $EpisodeSelected Done!!")"
}

#######################################
#         Quality And Servers         #
#######################################

# Default Server
function DefaultQuality(){
	MainDirectLink=$1
	if [[ -z "$MainDirectLink" ]]; then
		ErrorFunc "Server Not Found"
		exit 1
	fi
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			TimeStart=$(date +%s)
			trapDel
			aria2c -x 16 -s 16 --console-log-level=error --referer=$BASE_URL --download-result=hide --auto-save-interval=0 "$MainDirectLink" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn "$MainDirectLink" "$FILEVIDNAME"
		fi
	else
		ErrorFunc "Invalid Utility Number..."
		exit 1
	fi
}

# SBPlay Server
function Server1(){
	MainDownLink=$1
	if [[ -z "$MainDownLink" ]]; then
		ErrorFunc "Server Not Found"
		exit 1
	fi
	RootURL="https://sbplay1.com"
	VaLMain=$(
		wget -qO- "$MainDownLink" | \
		grep -o '<tr><td><a.*href="#".*onclick="download.*>.*</td>' | \
		grep 1920 | \
		awk -F["'"] '{print $2" "$4" "$6}'
	)
	if [[ -z $VaLMain ]]; then
	VaLMain=$(
		wget -qO- "$MainDownLink" | \
		grep -o '<tr><td><a.*href="#".*onclick="download.*>.*</td>' | \
		grep 1280 | \
		awk -F["'"] '{print $2" "$4" "$6}'
	)
	elif [[ -z $VaLMain ]]; then
	VaLMain=$(
		wget -qO- "$MainDownLink" | \
		grep -o '<tr><td><a.*href="#".*onclick="download.*>.*</td>' | \
		grep 640 | \
		awk -F["'"] '{print $2" "$4" "$6}'
	)
	fi
	ID=$(
		echo $VaLMain | \
		awk '{print $1}'
	)
	MODE=$(
		echo $VaLMain | \
		awk '{print $2}'
	)
	HASH=$(
		echo $VaLMain | \
		awk '{print $3}'
	)
	MainDownLink="$RootURL/dl?op=download_orig&id=$ID&mode=$MODE&hash=$HASH"
	MainDirectL=$(
		wget -qO- "$MainDownLink" | \
		grep 'Direct Download' | \
		grep -o "https:[^'\"<>]*"
	)
	MainDirectL=$(echo "$MainDirectL" | tr -d '\n')
	ConGrep=$(
		curl -e "$RootURL" -LsI "$MainDirectL" | \
		grep -i Content-Length | \
		awk '{print $2}' | \
		tr -dc '[:print:]'
	)
	if [[ -z "$ConGrep" ]]; then
		ErrorFunc "Server Not Found"
		exit 1
	fi
	InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			TimeStart=$(date +%s)
			trapDel
			aria2c -x 16 -s 16 --console-log-level=error --referer=$RootURL --download-result=hide --auto-save-interval=0 "$MainDirectL" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn1 "$MainDirectL" "$FILEVIDNAME"
		fi
	else
		ErrorFunc "Invalid Utility Number..."
		exit 1
	fi
}

# MP4 Upload Server
function Server2(){
	MainDownLink=$1
	if [[ -z "$MainDownLink" ]]; then
		ErrorFunc "Server Not Found"
		exit 1
	fi
	RootUrl="https://www.mp4upload.com"
	if [[ "$(echo "$MainDownLink" | awk -F[://] '{print $1}')" == "http" ]]; then
		MainDownLink=$(
			echo "$MainDownLink" | \
			sed 's|http://|https://|g'
		)
	fi
# 1st Connection Bridge
	ID=$(
		wget -qO- $MainDownLink | \
		pup 'input[type="hidden"]' | \
		grep 'name="id"' | \
		awk -F['"'] '{print $6}'
	)
	FNAME=$(
		wget -qO- $MainDownLink | \
		pup 'input[type="hidden"]' | \
		grep 'name="fname"' | \
		awk -F['"'] '{print $6}'
	)
	OUT=$(curl -s -X POST -d "op=download1&usr_login=&id=$ID&fname=$FNAME&referer=&method_free=+" "$MainDownLink")
	echo $OUT > /dev/null
# 2nd Connection Bridge
	ID=$(
		wget -qO- "$MainDownLink" | \
		pup 'input[type="hidden"]' | \
		grep 'name="id"' | \
		awk -F['"'] '{print $6}'
	)
	MainDirectLink=$(
		curl -sD- -ke "$RootUrl" -X POST -d "op=download2&id=$ID&rand=&referer=$MainDownLink&method_free=+&method_premium=" "$MainDownLink"
	)
	MainDirectLUni=$(
		echo "$MainDirectLink" | \
		grep location | \
		awk '{print $2}' | \
		sed $'s/[^[:print:]\t]//g'
	)
	ConGrep=$(
		curl -e "$RootUrl" -LskI "$MainDirectLUni" | \
		grep -i Content-Length | \
		awk '{print $2}' | \
		tr -dc '[:print:]'
	)
	if [[ -z "$ConGrep" ]]; then
		ErrorFunc "Server Not Found"
		exit 1
	fi
	InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			TimeStart=$(date +%s)
			trapDel
			aria2c -x 2 -s 2 --console-log-level=error --referer "$RootUrl" --check-certificate=false --download-result=hide --auto-save-interval=0 "$MainDirectLUni" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn2 "$MainDirectLUni" "$FILEVIDNAME"
		fi
	else
		ErrorFunc "Invalid Utility Number..."
		exit 1
	fi
}

# FPlayer Server
function Server3(){
	MainDownLink=$1
	if [[ -z "$MainDownLink" ]]; then
		ErrorFunc "Server Not Found"
		exit 1
	fi
	GetAPIServ1=$(
		wget -qO- "$MainDownLink" | \
		grep '$.post' | \
		awk -F["'"] '{print $2}' | \
		sed 's|/api|https://fplayer.info/api|g'
	)
	MainDownL=$(
		curl -s -X POST -e "https://fplayer.info" "$GetAPIServ1" | \
		grep -o "https:[^'\"<>]*" | \
		grep 'fvs' | \
		tail -n1 | \
		tr -d '\' 2> /dev/null
	)
	ConGrep=$(
		curl -e "$RootURL" -LksI "$MainDownL" | \
		grep -i Content-Length | \
		awk '{print $2}' | \
		tr -dc '[:print:]'
	)
	if [[ -z "$ConGrep" ]]; then
		ConGrep="1"
	fi
	if [[ "$ConGrep" -lt "225000" ]]; then
		ErrorCatchFunc "Kek.. Server Down, so I'm gonna do my Job to find another server"
		MainDownL=$(
			curl -s -X POST -e "https://fplayer.info" "$GetAPIServ1" | \
			grep -o "https:[^'\"<>]*" | \
			grep 'fvs' | \
			tail -n2 | \
			head -1 | \
			tr -d '\' 2> /dev/null
		)
		if [[ -z "$MainDownL" ]]; then
		ErrorFunc "Server Not Found"
		exit 1
		fi
		ConGrep=$(
			curl -e "$RootURL" -LksI "$MainDownL" | \
			grep -i Content-Length | \
			awk '{print $2}' | \
			tr -dc '[:print:]'
		)
	fi
	InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			TimeStart=$(date +%s)
			trapDel
			aria2c -x 2 -s 2 --console-log-level=error --referer=$RootURL --check-certificate=false --download-result=hide --auto-save-interval=0 "$MainDownL" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn1 "$MainDownL" "$FILEVIDNAME"
		fi
	else
		ErrorFunc "Invalid Utility Number..."
		exit 1
	fi
}

function LowQuality(){
	MainDirectL=$(
		wget -qO- "$LinkFor" | \
		pup 'div[class="dowload"]' | \
		grep -o "https[^'\"<>]*" | \
		grep 'gogo-cdn' | \
		tail -3 | \
		head -1
	)
	ConGrep=$(
		curl -e $BASE_URL -LsI "$MainDirectL" | \
		grep -i Content-Length | \
		awk '{print $2}' | \
		tr -dc '[:print:]'
	)
	MainDirectLink=$MainDirectL
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			trapDel
			aria2c -x 16 -s 16 --console-log-level=error --referer=$BASE_URL --download-result=hide --auto-save-interval=0 "$MainDirectLink" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn "$MainDirectLink" "$FILEVIDNAME"
		fi
	else
		ErrorFunc "Invalid Utility Number..."
		exit 1
	fi
}

function Server1Low(){
	MainDownLink=$1
	if [[ -z "$MainDownLink" ]]; then
		ErrorFunc "Server Not Found"
		exit 1
	fi
	RootURL="https://sbplay1.com"
	VaLMain=$(
		wget -qO- "$MainDownLink" | \
		grep -o '<tr><td><a.*href="#".*onclick="download.*>.*</td>' | \
		grep 640 | \
		awk -F["'"] '{print $2" "$4" "$6}'
	)
	ID=$(
		echo $VaLMain | \
		awk '{print $1}'
	)
	MODE=$(
		echo $VaLMain | \
		awk '{print $2}'
	)
	HASH=$(
		echo $VaLMain | \
		awk '{print $3}'
	)
	MainDownLink="$RootURL/dl?op=download_orig&id=$ID&mode=$MODE&hash=$HASH"
	MainDirectL=$(
		wget -qO- "$MainDownLink" | \
		grep 'Direct Download' | \
		grep -o "https:[^'\"<>]*"
	)
	MainDirectL=$(echo "$MainDirectL" | tr -d '\n')
	ConGrep=$(
		curl -e "$RootURL" -LsI "$MainDirectL" | \
		grep -i Content-Length | \
		awk '{print $2}' | \
		tr -dc '[:print:]'
	)
	if [[ -z "$ConGrep" ]]; then
		ErrorFunc "Server Not Found"
		exit 1
	fi
	InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
	if [[ "$utility" =~ $HHSS ]]; then
		if [ "$utility" == "1" ]; then
			TimeStart=$(date +%s)
			trapDel
			aria2c -x 16 -s 16 --console-log-level=error --referer=$RootURL --download-result=hide --auto-save-interval=0 "$MainDirectL" -o $FILEVIDNAME
			echo
			TimeElapse=$(date +%s)
			InfoFunc "Downloading Episode $EpisodeSelected Done!!"
			AdditionalInfoFunc "Took $(TimeTranslate $(( $TimeElapse - $TimeStart ))) to Finish"
		elif [ "$utility" == "2" ]; then
			trapDel1
			DownloaderOwn1 "$MainDirectL" "$FILEVIDNAME"
		fi
	else
		ErrorFunc "Invalid Utility Number..."
		exit 1
	fi
}

function QualityPicker(){
	read -p "$(InputSign 'Quality: ')" QualityPicker
	if [[ $QualityPicker = "" ]]; then
		ErrorFunc "You Entered Nothing"
		QualityPicker
	elif [[ ! $QualityPicker =~ ^([H|h]igh|[L|l]ow*)$ ]]; then
		ErrorFunc "Undefined Option, Bruh just pick between (High, Low) Server"
		QualityPicker
	fi
	case $QualityPicker in
		high|High)
			if [[ "$server" =~ $HHSS ]]; then
				if [[ "$server" == "default" ]]; then
					MainMenuMessage
					for barmod in $(seq 1 100); do
						sleep 0.005
						ProgressBarModified ${barmod} 100
					done
					printf '\n' 
					InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
					DefaultQuality "$MainDirectL"
					exit 0
				elif [[ "$server" == "1" ]]; then
					MainMenuMessage
					for barmod in $(seq 1 100); do
						sleep 0.005
						ProgressBarModified ${barmod} 100
					done
					printf '\n' 
					Server1 "$MainDirectLS1"
					exit 0
				elif [[ "$server" == "2" ]]; then
					MainMenuMessage
					for barmod in $(seq 1 100); do
						sleep 0.005
						ProgressBarModified ${barmod} 100
					done
					printf '\n' 
					Server2 "$MainDirectLS2"
					exit 0
				elif [[ "$server" == "3" ]]; then
					MainMenuMessage
					for barmod in $(seq 1 100); do
						sleep 0.005
						ProgressBarModified ${barmod} 100
					done
					printf '\n' 
					Server3 "$MainDirectLS3"
					exit 0
				fi
			else
				ErrorFunc "Invalid Server Value..."
				exit 1
			fi
		;;
	low|Low)
		if [[ "$server" =~ $HHSS ]];then
			if [[ $server == "default" ]]; then
				InfoFunc "Video Size: $(UnitConversion "$ConGrep")"
				LowQuality
				exit 0
			elif [[ $server == "1" ]]; then
				Server1Low "$MainDirectLS1"
			else
				ErrorFunc "Low Quality only Available in Default Server and Server 1"
				exit 1
			fi
		fi
	esac
}

function SearchArgsInf(){
	KeyWord=$1
	{
		wget -qO- "https://gogoanime.cm/search.html?keyword=$KeyWord"
		wget -qO- "https://gogoanime.cm/search.html?keyword=$KeyWord&page=2"
	} | \
	pup 'p[class="name"]' | \
	grep -o "<a.*href=".*".*title=".*">" | \
	grep -o 'le=".*"' | \
	sed 's|le="||g' | \
	awk 'sub(/\"/,"")' | \
	printTable '|' "Anime Name\n$(awk '{print $0}')"
	read -p "$(InputSign 'Enter a Number: ')" SelectedQuery
	QuerySelectLink=$(
		wget -qO- "https://gogoanime.cm/search.html?keyword=$KeyWord" | \
		pup 'p[class="name"]' | \
		grep -o "/category/[^'\"<>]*" | \
		sed 's|/category/|https://gogoanime.cm/category/|g' | \
		sed -n "$SelectedQuery"p
	)
	TyPe=$(
		wget -qO- "$QuerySelectLink" | \
		pup 'p.type' | \
		grep -o '.*/sub-category/.*' | \
		grep -o 'title=".*' | \
		sed 's|title="||g' | \
		sed 's|\">||g' | \
		xargs
	)
	GenRe=$(
		wget -qO- "$QuerySelectLink" | \
		pup 'p.type' | \
		grep -o '.*/genre/.*' | \
		grep -o 'title=".*' | \
		sed 's|title="||g' | \
		sed 's|\">||g' | \
		xargs | \
		sed 's| |, |g'
	)
	StaTus=$(
		wget -qO- "$QuerySelectLink" | \
		pup 'p.type' | \
		xargs | \
		grep -o "Status: </span>.*</a>" | \
		grep -o "title=.*>" | \
		grep -o '>.*<' | \
		tr -d "<>"
	)
	ReleaseDate=$(
		 wget -qO- "$QuerySelectLink" | \
		pup 'p.type' | \
		grep -oE "20[0-2][0-9]|1[0-9][0-9][0-9]" | \
		uniq
	)
	echoterd "Anime Information:"
	echoterd "Type: $TyPe"
	echoterd "Genre: $GenRe"
	echoterd "Released: $ReleaseDate"
	echoterd "Status:$StaTus"
	exit 0
}

#######################################
#            Args Parsers             #
#######################################

function ParseArgs(){
	while getopts ":s:" opt; do
		case "${opt}" in
			s)
				s=${OPTARG}
				if [[ $s == "" ]]; then
					ErrorFunc "Search Query Must not be empty"
					ErrorHelp | column -ts $'\t' | sed 's|                               ||g'
					exit 1
				fi
				SearchArgsInf "$s"
				exit 0
				;;
		esac
	done
	shift $((OPTIND -1))
}

function ParseArgsNon(){
	while [[ $# -gt 0 ]]; do
		case "$1" in
			-d)
				FileDir="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )/$(basename $0)"
				rm $FileDir
				rm -r /etc/emina
				for barmod in $(seq 1 100); do
					sleep 0.001
					ProgressBarModifiedUnin ${barmod} 100
				done
				printf '\n'
				InfoFunc "Uninstalling Completed!"
				exit 0
				;;
			-h)
				ErrorHelp | column -ts $'\t' | sed 's|                               ||g'
				exit 0
				;;
			-v)
				echo "v0.1 Beta (Currently on Beta Test, Unstable Version)"
				exit 0
				;;
			*)
				ErrorFunc "[ $1: is not valid args ]"
				ErrorHelp | column -ts $'\t' | sed 's|                               ||g'
				exit 1
				;;
		esac
	done
}

function ErrorHelp(){
	echo -e 'Usage: emina-cli -s "Kaguya Sama"'
	echo -e 'Usage: emina-cli [-dvhs]'
	echo -e "   -d\t: Uninstall Script with its Config Files"
	echo -e "   -v\t: Show the version of the script"
	echo -e '   -s "<search query>"\t: Search Anime with info'
	echo -e "   -h\t: Show this help"
	printf '\n      You can change Servers or Download Method by changing the value of the "server or utility" variable in ' && tput setab 8 && printf '/etc/emina/down.conf' && tput sgr 0 && printf "\n"
	printf '      Option "-d" is to Uninstall this Script with ' && tput setab 8 && printf '/etc/emina/down.conf & /etc/emina/eminavars' && tput sgr 0 && printf ' But it wont delete all the prerequisites/dependencies that installed by this script (it can be used for other scripts)..' && printf "\n\n"
}

#######################################
#           Main Functions            #
#######################################

function MainFunction(){
	InstallPrerequisites
	SearchForAnime
	SeriesSelector
	EpisodeSelector
	DownloadUtilityForRange
}

if [[ $* == *"-s"* ]]; then
ParseArgs "$@"
else
ParseArgsNon "$@"
fi
MainFunction
